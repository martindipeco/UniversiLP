/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package ulpejemplo.vistas;

import java.time.LocalDate;
import java.time.ZoneId;
import java.util.Calendar;
import java.util.Date;
import javax.swing.JOptionPane;
import ulpejemplo.accesoDatos.EstudianteData;
import ulpejemplo.entidades.Estudiante;

/**
 *
 * @author marti
 */
public class FormularioEstudiante extends javax.swing.JInternalFrame {

    /**
     * Creates new form FormularioEstudiante
     */
    public FormularioEstudiante() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jLestudiante = new javax.swing.JLabel();
        jLdni = new javax.swing.JLabel();
        jLapellido = new javax.swing.JLabel();
        jLnombre = new javax.swing.JLabel();
        jLactivo = new javax.swing.JLabel();
        jLfechaNac = new javax.swing.JLabel();
        jTFdni = new javax.swing.JTextField();
        jBbuscar = new javax.swing.JButton();
        jTFapellido = new javax.swing.JTextField();
        jTFnombre = new javax.swing.JTextField();
        jRBactivo = new javax.swing.JRadioButton();
        jDCHfechaNac = new com.toedter.calendar.JDateChooser();
        jBnuevo = new javax.swing.JButton();
        jBeliminar = new javax.swing.JButton();
        jBguardar = new javax.swing.JButton();
        jBsalir = new javax.swing.JButton();
        jSeparator2 = new javax.swing.JSeparator();

        setBackground(new java.awt.Color(204, 204, 204));
        setClosable(true);
        setTitle("Formulario de Estudiantes");
        setPreferredSize(new java.awt.Dimension(835, 670));

        jLestudiante.setFont(new java.awt.Font("Tahoma", 1, 27)); // NOI18N
        jLestudiante.setText("Estudiantes");

        jLdni.setText("DNI: ");

        jLapellido.setText("Apellido: ");

        jLnombre.setText("Nombre: ");

        jLactivo.setText("Activo: ");

        jLfechaNac.setText("Fecha de Nacimiento: ");

        jBbuscar.setText("Buscar");
        jBbuscar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBbuscarActionPerformed(evt);
            }
        });

        jBnuevo.setText("Nuevo");
        jBnuevo.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBnuevoActionPerformed(evt);
            }
        });

        jBeliminar.setText("Eliminar");
        jBeliminar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBeliminarActionPerformed(evt);
            }
        });

        jBguardar.setText("Guardar");
        jBguardar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBguardarActionPerformed(evt);
            }
        });

        jBsalir.setText("Salir");
        jBsalir.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jBsalirActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(67, 67, 67)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                            .addGroup(layout.createSequentialGroup()
                                .addComponent(jLfechaNac)
                                .addGap(18, 18, 18)
                                .addComponent(jDCHfechaNac, javax.swing.GroupLayout.DEFAULT_SIZE, 274, Short.MAX_VALUE))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLnombre)
                                    .addComponent(jLactivo))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFnombre)
                                    .addGroup(layout.createSequentialGroup()
                                        .addComponent(jRBactivo, javax.swing.GroupLayout.PREFERRED_SIZE, 29, javax.swing.GroupLayout.PREFERRED_SIZE)
                                        .addGap(0, 0, Short.MAX_VALUE))))
                            .addGroup(layout.createSequentialGroup()
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jLapellido)
                                    .addComponent(jLdni))
                                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(jTFdni)
                                    .addComponent(jTFapellido)
                                    .addComponent(jSeparator2)
                                    .addGroup(layout.createSequentialGroup()
                                        .addGap(124, 124, 124)
                                        .addComponent(jLestudiante)
                                        .addGap(0, 0, Short.MAX_VALUE)))))
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED))
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jBnuevo)
                        .addGap(63, 63, 63)
                        .addComponent(jBeliminar)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 73, Short.MAX_VALUE)
                        .addComponent(jBguardar)
                        .addGap(77, 77, 77)))
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jBsalir)
                    .addComponent(jBbuscar))
                .addContainerGap(43, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLestudiante)
                .addGap(12, 12, 12)
                .addComponent(jSeparator2, javax.swing.GroupLayout.PREFERRED_SIZE, 10, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(layout.createSequentialGroup()
                        .addComponent(jLdni)
                        .addGap(31, 31, 31)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLapellido)
                            .addComponent(jTFapellido, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                        .addGap(18, 18, 18)
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                            .addComponent(jLnombre)
                            .addComponent(jTFnombre, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)))
                    .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                        .addComponent(jTFdni, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                        .addComponent(jBbuscar)))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING, false)
                    .addComponent(jRBactivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                    .addComponent(jLactivo, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jLfechaNac)
                    .addComponent(jDCHfechaNac, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(88, 88, 88)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jBnuevo)
                    .addComponent(jBeliminar)
                    .addComponent(jBguardar)
                    .addComponent(jBsalir))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jBbuscarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBbuscarActionPerformed
        //deshabilitar "guardar" si dni devuelve un resultado válido
        try
        {
            int dni = Integer.parseInt(jTFdni.getText());
            //instancio un estudiante data para acceder a sus metodos
            EstudianteData estuData = new EstudianteData();
            //instancio un estudiante para recibir datos
            Estudiante estu = new Estudiante();
            estu = estuData.buscarEstudiantePorDNI(dni, true);
            //si el método me devuelve un estudiante null, significa que no existe ese estudiante
            if (estu == null)
            {
                //borramos el dni ingresado y nos vamos
                //el método buscar ya tiene su aviso de No Encontrado
                jTFdni.setText("");
                return;
            }
            else
            //¿deshabilito "guardar" para evitar duplicados?
            //cargo datos en formulario
            {
                jTFapellido.setText(estu.getApellido());
                jTFnombre.setText(estu.getNombre());
                if (estu.isActivo())
                {
                    jRBactivo.setSelected(true);
                }
                else
                {
                    jRBactivo.setSelected(false);
                }
                //localDate : estu.getFechaNac()
                //transforma localDate a instant: atStartOfDay(ZoneId.systemDefault()).toInstant()
                //Date.from(Instant) trnasforma instant a date

                jDCHfechaNac.setDate(Date.from(estu.getFechaNac().atStartOfDay(ZoneId.systemDefault()).toInstant()));

                //debería apagar boton para guardar, porque ese alumno ya existe
                //pero sino, no puedo acceder a "modificar" desde ese mismo boton
                //jBguardar.setEnabled(false);
                
                //¿agregar botón de "editar" para modificar datos????
            }
            
        }
        //An empty TextField, or doubles or floats would result in a NumberFormatException
        catch(NumberFormatException nfe)
        {
            JOptionPane.showMessageDialog(this, "Ingrese un número valido");
            jTFdni.setText("");
            return;
        }
    }//GEN-LAST:event_jBbuscarActionPerformed

    private void jBeliminarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBeliminarActionPerformed
        // TODO add your handling code here:
        //¿no debería ser el método de borrado por DNI?
        //capturar dato de id del estudiante
        //si estu es null (o sea, si no se instancio o si se devolvio null
        try
        {
            int dni = Integer.parseInt(jTFdni.getText());
            //instancio un estudiante data para acceder a sus metodos
            EstudianteData estuData = new EstudianteData();
            //instancio un estudiante para recibir datos
            Estudiante estu = new Estudiante();
            estu = estuData.buscarEstudiantePorDNI(dni, true);
            //si el método me devuelve un estudiante null, significa que no existe ese estudiante o que no está activo
            if (estu == null)
            {
                //borramos el dni ingresado y nos vamos
                jTFdni.setText("");
                return;
            }
            else
            //¿deshabilito "guardar" para evitar duplicados?
            //traigo dato de id de estudiante para pasarselo al método eliminar estudiante
            {
                int id = estu.getId_estudiante();
                estuData.eliminarEstudiante(id);
                //limpiar campos
                limpiarCampos();

                //apagar boton para guardar, porque ese alumno ya existe
                jBguardar.setEnabled(false);
            }
            
        }
        //An empty TextField, or doubles or floats would result in a NumberFormatException
        catch(NumberFormatException nfe)
        {
            JOptionPane.showMessageDialog(this, "Ingrese un número valido");
            jTFdni.setText("");
            return;
        }
    }//GEN-LAST:event_jBeliminarActionPerformed

    private void jBnuevoActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBnuevoActionPerformed
        // TODO add your handling code here:
        //limpia campos
        limpiarCampos();
        //habilita guardar
        jBguardar.setEnabled(true);
        //hace editables todos los campos?
        
    }//GEN-LAST:event_jBnuevoActionPerformed

    private void jBguardarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBguardarActionPerformed
        // TODO add your handling code here:
        //capturar todos los campos 
        //buscar estudiante
        //si el estudiante existe, modifiarlo a traves del metodo modificar
        //si el estudiante NO existe, generar un estudiante con el constructor SIN id
        try
        {
            //debo discernir si el estudiante es nuevo para guardar o existente para editar
            //busco estudiante por dni
            //si devuelve null, es nuevo
            //caso contrario, es para editar
            int dni = Integer.parseInt(jTFdni.getText());
            //instancio un estudiante data para acceder a sus metodos
            EstudianteData estuData = new EstudianteData();
            //busco estudiante por dni
            Estudiante estuAux = estuData.buscarEstudiantePorDNI(dni, false);
            //abrimos el if
            if (estuAux != null)
            {
                //metodo modificar
                int estuID = estuAux.getId_estudiante();
                int estuDNI = Integer.parseInt(jTFdni.getText());
                String apellido = jTFapellido.getText();
                String nombre = jTFnombre.getText();
                LocalDate fechaNac = jDCHfechaNac.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                //¿debería setear activo siempre true cuando creo un estudiante?
                Boolean activo = false;
                if (jRBactivo.isSelected())
                {
                    activo = true;
                }
                Estudiante estuPosta = new Estudiante(estuID, estuDNI, apellido, nombre, fechaNac, activo);
                // la forma correcta es con Override equals() y hashCode() , despues -> if (estuAux.equals(estuPosta))
                //if (estuPosta.equals(estuAux))
                if (estuAux.getDni() == estuPosta.getDni() && estuAux.getNombre().equals(estuPosta.getNombre())&& estuAux.getApellido().equals(estuPosta.getApellido())&& estuAux.getFechaNac().compareTo(estuPosta.getFechaNac())==0 && estuAux.isActivo() == estuPosta.isActivo())
                {
                    JOptionPane.showMessageDialog(this, "No se han producido cambios");
                    return;
                }
                estuData.modificarEstudiante(estuPosta);
                
            }
            else
            {
                try
                {
                    if (jTFapellido.getText().isEmpty())
                    {
                        JOptionPane.showMessageDialog(this, "Ingrese un apelliido");
                        return;
                    }
                    if (jTFapellido.getText().chars().anyMatch(Character::isDigit))
                    {
                        JOptionPane.showMessageDialog(this, "No se permiten números en apellido");
                        return;
                    }
                    String apellido = jTFapellido.getText();
                    
                    if (jTFnombre.getText().isEmpty())
                    {
                        JOptionPane.showMessageDialog(this, "Ingrese un nombre");
                        return;
                    }
                    if (jTFnombre.getText().chars().anyMatch(Character::isDigit))
                    {
                        JOptionPane.showMessageDialog(this, "No se permiten números en nombre");
                        return;
                    }
                    String nombre = jTFnombre.getText();
                    
                    //debo manejar con if si la fecha seleccionada está vacía
                    
                    if (jDCHfechaNac.getDate() == null)
                    {
                        JOptionPane.showMessageDialog(this, "Ingrese una fecha");
                        return;
                    }
                    
                    //para mejorar: agregar condicional para que no permita ingresar fechas que generen estudiantes menores de edad
                    //año presente - año elegido > 18 , ponele
                    
                    Calendar fechaActual = Calendar.getInstance();
                    Calendar fechaNacAux = Calendar.getInstance();
                    fechaNacAux.setTime(jDCHfechaNac.getDate());
                    
                    int edad = fechaActual.get(Calendar.YEAR) - fechaNacAux.get(Calendar.YEAR);
                    
                    if (fechaActual.get(Calendar.MONTH) < fechaNacAux.get(Calendar.MONTH) || (fechaActual.get(Calendar.MONTH) == fechaNacAux.get(Calendar.MONTH) && fechaActual.get(Calendar.DAY_OF_MONTH) < fechaNacAux.get(Calendar.DAY_OF_MONTH))) 
                    {
                        edad--;
                    }

                    if (edad < 18) 
                    {
                        JOptionPane.showMessageDialog(this, "Estudiante debe ser mayor de 18 años");
                        return;
                    }
                    
                    
                    LocalDate fechaNac = jDCHfechaNac.getDate().toInstant().atZone(ZoneId.systemDefault()).toLocalDate();
                    Boolean activo = false;
                    if (jRBactivo.isSelected())
                    {
                        activo = true;
                    }
                    //instancio un estudiante a partir de datos
                    Estudiante estu = new Estudiante(dni, apellido, nombre, fechaNac, activo);
                    // se lo paso al método guardar estudiante
                    estuData.guardarEstudiante(estu);
                }
                //An empty TextField, or doubles or floats would result in a NumberFormatException
                //in numeric text fields
                catch(NumberFormatException nfe)
                {
                    JOptionPane.showMessageDialog(this, "Ingrese un dato valido");
                }
            }
            limpiarCampos();
            
        }
        //An empty TextField, or doubles or floats would result in a NumberFormatException
        catch(NumberFormatException nfe)
        {
            JOptionPane.showMessageDialog(this, "Ingrese un dato valido");
            return;
        }
        
    }//GEN-LAST:event_jBguardarActionPerformed

    private void jBsalirActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jBsalirActionPerformed
        // TODO add your handling code here:
        int choice = JOptionPane.showConfirmDialog(this, "¿Salir de este formulario?", "Confirmación", JOptionPane.YES_NO_OPTION);
        if (choice == JOptionPane.YES_OPTION) 
        {
            // con dispose salimos del internal frame. Para salir x completo: "System.exit(0);"
            this.dispose();
        }
    }//GEN-LAST:event_jBsalirActionPerformed

    private void limpiarCampos()
    {
        jTFdni.setText("");
        jTFapellido.setText("");
        jTFnombre.setText("");
        jRBactivo.setSelected(false);
        jDCHfechaNac.setDate(null);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jBbuscar;
    private javax.swing.JButton jBeliminar;
    private javax.swing.JButton jBguardar;
    private javax.swing.JButton jBnuevo;
    private javax.swing.JButton jBsalir;
    private com.toedter.calendar.JDateChooser jDCHfechaNac;
    private javax.swing.JLabel jLactivo;
    private javax.swing.JLabel jLapellido;
    private javax.swing.JLabel jLdni;
    private javax.swing.JLabel jLestudiante;
    private javax.swing.JLabel jLfechaNac;
    private javax.swing.JLabel jLnombre;
    private javax.swing.JRadioButton jRBactivo;
    private javax.swing.JSeparator jSeparator2;
    private javax.swing.JTextField jTFapellido;
    private javax.swing.JTextField jTFdni;
    private javax.swing.JTextField jTFnombre;
    // End of variables declaration//GEN-END:variables
}
